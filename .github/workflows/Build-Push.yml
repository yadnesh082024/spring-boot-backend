name: Backend CI Pipeline

# Workflow triggers for pull requests, manual dispatch, and pushes to specific branches.
on:
  pull_request:
    types: [assigned]
    branches: [main]
  workflow_dispatch:
  push:
    branches:
      - main
      - dev/**

jobs:
  build-test:
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Checkout the repository code.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Set up JDK 17 for the build process.
      - name: Set up JDK 17
        uses: actions/setup-java@v4.3.0
        with:
          java-version: '17'
          distribution: 'temurin'

      # Grant execute permissions to the Gradle wrapper script.
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build the project and run tests using Gradle.
      - name: Build and Test with Gradle
        run: |
          ./gradlew build
          ./gradlew test jacocoTestReport

      # Upload build and test results as artifacts.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            build/test-results/test
            build/reports/jacoco/test/jacocoTestReport.xml

  sonarcloud-scan:
    needs: build-test
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Perform a SonarCloud scan to analyze the codebase for quality and vulnerabilities.
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.java.coveragePlugin=jacoco
            -Dsonar.coverage.jacoco.xmlReportPaths=build/reports/jacoco/test/jacocoTestReport.xml
            -Dsonar.branch.name=${{ github.ref_name }}

  docker-build-push:
    needs: sonarcloud-scan
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Checkout the repository code again for Docker build.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Log in to Docker Hub using credentials stored in secrets.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker images with tags based on branch name and timestamp.
      - name: Build and Push Docker Image
        id: build
        run: |
          export TZ=Asia/Kolkata
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/github-actions-backend:${BRANCH_NAME}-${TIMESTAMP}"
          LATEST_TAG="${{ secrets.DOCKER_USERNAME }}/github-actions-backend:${BRANCH_NAME}-latest"
          docker build -t ${IMAGE_TAG} -t ${LATEST_TAG} .
          docker push ${IMAGE_TAG}
          docker push ${LATEST_TAG}
          echo "image_tag=${BRANCH_NAME}-${TIMESTAMP}" >> $GITHUB_OUTPUT

  update-manifests:
    needs: docker-build-push
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Checkout the Kubernetes manifests repository.
      - name: Checkout Manifests
        uses: actions/checkout@v4
        with:
          repository: yadnesh082024/spring-boot-backend-k8s-manifests
          token: ${{ secrets.GH_PAT_UPDATE_MANIFEST }}

      # Set up Git configuration for committing changes.
      - name: Set up Git
        run: |
          git config --global user.name "GitHub-Actions-CI-Build"
          git config --global user.email "user@gitHubActions.com"

      # Update Helm values with the new image tag.
      - name: Update Helm Values
        env:
          IMAGE_TAG: ${{ needs.docker-build-push.outputs.image_tag }}
        run: |
          sed -i "s/tag: .*/tag: ${IMAGE_TAG}/" spring-boot-helm-chart-argo-cd/values.yaml
          sed -i "s/tag: .*/tag: ${IMAGE_TAG}/" spring-boot-helm-chart-argo-rollout/values.yaml

  check-commit-changes:
    needs: update-manifests
    runs-on: ubuntu-latest
    environment: backend-test-dev
    steps:
      # Set up Git configuration again for the new job.
      - name: Set up Git
        run: |
          git config --global user.name "GitHub-Actions-CI-Build"
          git config --global user.email "user@gitHubActions.com"

      # Check for changes, commit if necessary, and create a pull request if not on main.
      - name: Check for Changes and Commit
        env:
          IMAGE_TAG: ${{ needs.docker-build-push.outputs.image_tag }}
        run: |
          git add .
          if ! git diff-index --quiet HEAD --; then
            if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
              git commit -m "Updated image tag to ${IMAGE_TAG}"
              git push origin main || echo "Push failed, possibly due to lack of permissions"
            else
              # Create a pull request if the branch is not main
              TIMESTAMP=$(date +'%Y%m%d%H%M%S')
              BRANCH_NAME="update-feature/${{ github.ref_name }}-${TIMESTAMP}"
              git checkout -b $BRANCH_NAME
              git commit -m "Update image tag to ${IMAGE_TAG}"
              git push -u origin $BRANCH_NAME

              # Create the pull request using GitHub CLI
              gh pr create --title "Updated image tag to ${IMAGE_TAG}" --body "This PR updates the image tag to ${IMAGE_TAG}."
            fi
          else
            echo "No changes detected."
          fi
